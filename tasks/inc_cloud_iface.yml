- debug:
    var: provision_docker_inventory
    verbosity: 2

- name: Bring up list of hosts
  local_action: 
    module: docker_container
    name: "{{ item['name'] }}"
    image: "{{ item.image|default(provision_docker_image_default) }}"
    privileged: "{{ provision_docker_privileged }}"
    state: "{{ provision_docker_state }}"
    restart: "{{ item.restart|default(True) }}"
    tls: "{{ provision_docker_use_tls }}"
    stop_timeout: 1
    tty: "{{provision_docker_use_docker_connection | bool}}"
    expose: "{{ item.expose|default(['1-65535']) }}"
    command: "{{ item.command|default(omit) }}"
    env: "{{ item.env|default(omit) }}"
    links: "{{ item.inks|default(omit) }}"
    volumes: "{{ item.volumes | default(omit) }}"

  with_items: "{{ provision_docker_inventory }}"
  changed_when: false

- name: Get IP of container
  local_action:
    module: "shell"
    args: "{{ role_path }}/files/docker_inspect.sh {{ item.name }}"
    #module: "command"
    #args: "docker inspect --format '{{ '{{' }} .NetworkSettings.IPAddress {{ '}}' }}' {{ item.name }}"
    #args: "docker inspect --format '{''{ .NetworkSettings.IPAddress }''}' {{ item.name }}"
  register: provision_docker_ip
  with_items: "{{ provision_docker_inventory }}"
  changed_when: false

- debug:
    var: provision_docker_ip
    verbosity: 2

- block:
  # Note: We had to move the invocation of the docker inspect command into a bash
  # script because it involces a command line parameter with {{ }}. Registering
  # the results puts the command line params into invocation. Referencing the
  # results variable fails because Ansible runs the invocation through jinja2
  # template engine and the {{.NetworkSettings.IPAddress}} variable does not
  # exist
  # TODO: Check if no results (i.e. results.stdout_lines length) returned from
  # docker_inspect.sh

  # TODO: copy ALL host vars in the inventory
  - name: "Associate ip address with hosts"
    local_action:
      module: add_host
      name: "{{ item.1['name'] }}"
      ansible_ssh_host: "{{ provision_docker_ip.results[item.0].stdout }}"
      ansible_ssh_user: "{{ item.1['ansible_ssh_user']|default(provision_docker_ssh_user) }}"
      ansible_ssh_pass: "{{ item.1['ansible_ssh_pass']|default(provision_docker_ssh_pass) }}"
      groups: "{{ provision_docker_groups | union(item.1['groups']|default([])) | join(',') }}"
    with_indexed_items: "{{ provision_docker_inventory }}"
    changed_when: false

  - name: Wait for ssh
    wait_for:
      host: "{{ hostvars[item.name]['ansible_ssh_host'] }}"
      port: 22
      timeout: 60
      connect_timeout: 5
    with_items: "{{ provision_docker_inventory }}"
  when: not provision_docker_use_docker_connection

- debug:
    var: provision_docker_inventory
    verbosity: 2
- debug:
    var: provision_docker_groups
    verbosity: 2

# TODO: copy ALL host vars in the inventory
- name: "Add docker hosts with connection docker"
  local_action:
    module: add_host
    name: "{{ item.1['name'] }}"
    docker_ip: "{{ provision_docker_ip.results[item.0].stdout }}"
    ansible_connection: docker
    #ansible_user: root
    ansible_user: "{{ provision_docker_ansible_user }}" 
    groups: "{{ provision_docker_groups | union(item.1['groups']|default([])) | join(',') }}"
  with_indexed_items: "{{ provision_docker_inventory }}"
  changed_when: false
  when: provision_docker_use_docker_connection

- name: Make sure able to connect to hosts
  raw: echo Hello
  delegate_to: "{{ item['name'] }}"
  with_items: "{{ provision_docker_inventory }}"
  changed_when: false
